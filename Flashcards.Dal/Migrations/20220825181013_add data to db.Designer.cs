// <auto-generated />
using System;
using Flashcards.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flashcards.Dal.Migrations
{
    [DbContext(typeof(FlashcardDbContext))]
    [Migration("20220825181013_add data to db")]
    partial class adddatatodb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Deck", b =>
                {
                    b.Property<Guid>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisibilityType")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.ToTable("Decks");

                    b.HasData(
                        new
                        {
                            DeckId = new Guid("2d3aa240-0469-4703-a79c-b587f1665151"),
                            Title = "Deck1",
                            VisibilityType = 0
                        },
                        new
                        {
                            DeckId = new Guid("19d22b9b-8764-4474-bcc8-46098343c5f1"),
                            Title = "Deck2",
                            VisibilityType = 0
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.DeckFolder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FolderId", "DeckId");

                    b.HasIndex("DeckId");

                    b.ToTable("DeckFolder");

                    b.HasData(
                        new
                        {
                            FolderId = new Guid("56582a77-fbb8-426c-84dd-4175db3d752c"),
                            DeckId = new Guid("2d3aa240-0469-4703-a79c-b587f1665151")
                        },
                        new
                        {
                            FolderId = new Guid("56582a77-fbb8-426c-84dd-4175db3d752c"),
                            DeckId = new Guid("19d22b9b-8764-4474-bcc8-46098343c5f1")
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.DeckUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "DeckId");

                    b.HasIndex("DeckId");

                    b.ToTable("DeckUser");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447"),
                            DeckId = new Guid("2d3aa240-0469-4703-a79c-b587f1665151"),
                            IsEditable = true
                        },
                        new
                        {
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447"),
                            DeckId = new Guid("19d22b9b-8764-4474-bcc8-46098343c5f1"),
                            IsEditable = true
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Flashcard", b =>
                {
                    b.Property<Guid>("FlashcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlashcardId");

                    b.HasIndex("DeckId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            FlashcardId = new Guid("843e2257-0f9e-4172-80c7-dcab58115097"),
                            Answer = "CAT",
                            DeckId = new Guid("2d3aa240-0469-4703-a79c-b587f1665151"),
                            Question = "KOT"
                        },
                        new
                        {
                            FlashcardId = new Guid("82f6eb02-fbd3-4224-819e-e41b4327a7e8"),
                            Answer = "DOG",
                            DeckId = new Guid("2d3aa240-0469-4703-a79c-b587f1665151"),
                            Question = "PIES"
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.FlashcardLevel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlashcardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FlashcardId");

                    b.HasIndex("FlashcardId");

                    b.ToTable("FlashcardLevel");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447"),
                            FlashcardId = new Guid("843e2257-0f9e-4172-80c7-dcab58115097"),
                            Level = 0
                        },
                        new
                        {
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447"),
                            FlashcardId = new Guid("82f6eb02-fbd3-4224-819e-e41b4327a7e8"),
                            Level = 0
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            FolderId = new Guid("56582a77-fbb8-426c-84dd-4175db3d752c"),
                            Name = "Folder1",
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447")
                        },
                        new
                        {
                            FolderId = new Guid("f227ba3a-9e2a-4135-9f0e-b57de88084a7"),
                            Name = "Folder2",
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447")
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("f74afa8b-ae7b-4886-92db-1be0e2495fff"),
                            Name = "User"
                        },
                        new
                        {
                            RoleId = new Guid("39b7e6b7-8ff9-4159-a0b9-128bc228941a"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.RoleUser", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("f74afa8b-ae7b-4886-92db-1be0e2495fff"),
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447")
                        },
                        new
                        {
                            RoleId = new Guid("f74afa8b-ae7b-4886-92db-1be0e2495fff"),
                            UserId = new Guid("961cd73b-a462-49d6-a8d9-fb9730654942")
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("212c6278-2116-488b-84fe-3353b3d18447"),
                            Email = "User1@flashcards.com",
                            Name = "User1",
                            Password = "User1"
                        },
                        new
                        {
                            UserId = new Guid("961cd73b-a462-49d6-a8d9-fb9730654942"),
                            Email = "User2@flashcards.com",
                            Name = "User2",
                            Password = "User2"
                        });
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.DeckFolder", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.Deck", "Deck")
                        .WithMany("DeckFolders")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashcards.Domain.Models.Entities.Folder", "Folder")
                        .WithMany("DeckFolders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.DeckUser", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.Deck", "Deck")
                        .WithMany("DeckUsers")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashcards.Domain.Models.Entities.User", "User")
                        .WithMany("DeckUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Flashcard", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.Deck", "Deck")
                        .WithMany("Flashcards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.FlashcardLevel", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.Flashcard", "Flashcard")
                        .WithMany("FlashcardLevels")
                        .HasForeignKey("FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashcards.Domain.Models.Entities.User", "User")
                        .WithMany("FlashcardLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Folder", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.User", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.RoleUser", b =>
                {
                    b.HasOne("Flashcards.Domain.Models.Entities.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashcards.Domain.Models.Entities.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Deck", b =>
                {
                    b.Navigation("DeckFolders");

                    b.Navigation("DeckUsers");

                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Flashcard", b =>
                {
                    b.Navigation("FlashcardLevels");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Folder", b =>
                {
                    b.Navigation("DeckFolders");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.Role", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("Flashcards.Domain.Models.Entities.User", b =>
                {
                    b.Navigation("DeckUsers");

                    b.Navigation("FlashcardLevels");

                    b.Navigation("Folders");

                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
